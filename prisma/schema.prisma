// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  cars              Car[]
  savedCars         Car[]              @relation("SavedCars")
  testDriveRequests TestDriveRequest[]
  messages          Message[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Car {
  id                String             @id @default(cuid())
  name              String
  brand             String
  type              CarType
  year              Int
  mileage           Int
  colors            String[]
  price             Float
  description       String
  images            String[]
  userId            String
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  isSold            Boolean?           @default(false)
  isFeatured        Boolean?           @default(false)
  isNew             Boolean?           @default(false)
  features          String[]
  location          String
  fuelType          FuelType?          @default(PETROL)
  transmission      Transmission?      @default(MANUAL)
  savedBy           User[]             @relation("SavedCars")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  specification     CarSpecification?
  seller            CarSeller?
  testDriveRequests TestDriveRequest[]
}

model CarSpecification {
  id             String   @id @default(cuid())
  engineCapacity Int? //cc
  doors          Int? //2-4
  seats          Int? //2-7
  topSpeed       Int? //km/h
  acceleration   Float? //0-100 km/h
  horsepower     Int? //hp
  torque         Int? //Nm
  length         Int? //cm
  width          Int? //cm
  height         Int? //cm
  weight         Int? //kg
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  carId String
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@unique([carId])
}

model CarSeller {
  id         String   @id @default(cuid())
  name       String
  image      String?
  phone      String?
  email      String?
  website    String?
  address    String?
  city       String?
  state      String?
  country    String?
  postalCode String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  carId String @unique
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model TestDriveRequest {
  id        String        @id @default(cuid())
  carId     String
  userId    String
  date      DateTime
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  car  Car  @relation(fields: [carId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([carId, userId])
}

model Message {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String
  content   String
  userId    String
  receiver  User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Transmission {
  MANUAL
  AUTOMATIC
}

enum CarType {
  SEDAN
  SUV
  HATCHBACK
  COUPE
  CONVERTIBLE
  PICKUP
  VAN
  WAGON
  CROSSOVER
  SPORTS
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}
